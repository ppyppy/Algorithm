//	dayRoom[k][n] = ( (day[k-1][n-1]||day[k-1][n+1]) && strategy[k]!=n )
//	一上来直接code，找小偷问题，有n个房间，其中一个房间有小偷。早上我们
//	可以打开一个房间的门看小偷在不在里面，晚上小偷会向左边或者右边的房间走。
//	现在给你一个开门的sequence，你输出这个sequence能不能保证找到小偷。
//	比如：如果只有三个房间那么如果打开房间的sequence是{1，1}那么一定会找到小偷。
//	因为如果小偷在中间那么第一天就会被找到，如果小偷在两边那么第二天一定回来
//	到中间也会被找到。房间数为n，sequence长度为k
	boolean canCatchThieft(int n, int[] strategy){
		if(strategy==null)
			return false;
		int k=strategy.length;
		boolean[][] table = new boolean[k+1][n];
		Arrays.fill(table[0], true);
		for(int i=1; i<=k; i++){
			boolean isCatch = true;
			for(int j=0; j<n; j++){
				boolean preRoom = (j==0 ? false : table[i-1][j-1]);
				boolean nextRoom = (j==n-1 ? false : table[i-1][j+1]);
				table[i][j] = ((preRoom || nextRoom) && strategy[i]!=j);
				if(table[i][j])
					isCatch = false;
			}
			if(isCatch)
				return true;
		}
		return false;
	}
